// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: wallet.sql

package db

import (
	"context"
)

const addWalletBalance = `-- name: AddWalletBalance :one
UPDATE wallets 
SET balance = balance + $2
WHERE id = $1 RETURNINg id, user_id, balance, currency
`

type AddWalletBalanceParams struct {
	ID      int64   `json:"id"`
	Balance float64 `json:"balance"`
}

func (q *Queries) AddWalletBalance(ctx context.Context, arg AddWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, addWalletBalance, arg.ID, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
	)
	return i, err
}

const createWallets = `-- name: CreateWallets :one
INSERT INTO wallets (
    user_id,
    balance,
    currency
) VALUES (
    $1, $2, $3
) RETURNINg id, user_id, balance, currency
`

type CreateWalletsParams struct {
	UserID   int32   `json:"user_id"`
	Balance  float64 `json:"balance"`
	Currency string  `json:"currency"`
}

func (q *Queries) CreateWallets(ctx context.Context, arg CreateWalletsParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallets, arg.UserID, arg.Balance, arg.Currency)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
	)
	return i, err
}

const getWalletById = `-- name: GetWalletById :one
SELECT id, user_id, balance, currency FROM wallets WHERE id = $1
`

func (q *Queries) GetWalletById(ctx context.Context, id int64) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWalletById, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
	)
	return i, err
}

const getWalletByIdAndUserId = `-- name: GetWalletByIdAndUserId :one
SELECT id, user_id, balance, currency FROM wallets 
WHERE id = $1 
AND user_id = $2
`

type GetWalletByIdAndUserIdParams struct {
	ID     int64 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetWalletByIdAndUserId(ctx context.Context, arg GetWalletByIdAndUserIdParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWalletByIdAndUserId, arg.ID, arg.UserID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
	)
	return i, err
}
