// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: merchant.sql

package db

import (
	"context"
)

const addMerchantBalance = `-- name: AddMerchantBalance :one
UPDATE merchants SET balance = balance + $2 WHERE id = $1 RETURNINg id, merchant_name, description, website, address, balance
`

type AddMerchantBalanceParams struct {
	ID      int64   `json:"id"`
	Balance float64 `json:"balance"`
}

func (q *Queries) AddMerchantBalance(ctx context.Context, arg AddMerchantBalanceParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, addMerchantBalance, arg.ID, arg.Balance)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.MerchantName,
		&i.Description,
		&i.Website,
		&i.Address,
		&i.Balance,
	)
	return i, err
}

const createMerchants = `-- name: CreateMerchants :one
INSERT INTO merchants (
    merchant_name,
    description,
    website,
    address
) VALUES (
    $1, $2, $3, $4
) RETURNINg id, merchant_name, description, website, address, balance
`

type CreateMerchantsParams struct {
	MerchantName string `json:"merchant_name"`
	Description  string `json:"description"`
	Website      string `json:"website"`
	Address      string `json:"address"`
}

func (q *Queries) CreateMerchants(ctx context.Context, arg CreateMerchantsParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchants,
		arg.MerchantName,
		arg.Description,
		arg.Website,
		arg.Address,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.MerchantName,
		&i.Description,
		&i.Website,
		&i.Address,
		&i.Balance,
	)
	return i, err
}

const deleteMerchants = `-- name: DeleteMerchants :exec
DELETE FROM merchants WHERE id = $1
`

func (q *Queries) DeleteMerchants(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMerchants, id)
	return err
}

const getMerchantsById = `-- name: GetMerchantsById :one
SELECT id, merchant_name, description, website, address, balance FROM merchants WHERE id = $1
`

func (q *Queries) GetMerchantsById(ctx context.Context, id int64) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantsById, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.MerchantName,
		&i.Description,
		&i.Website,
		&i.Address,
		&i.Balance,
	)
	return i, err
}

const getMerchantsByMerchantsName = `-- name: GetMerchantsByMerchantsName :one
SELECT id, merchant_name, description, website, address, balance FROM merchants WHERE merchant_name = $1
`

func (q *Queries) GetMerchantsByMerchantsName(ctx context.Context, merchantName string) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantsByMerchantsName, merchantName)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.MerchantName,
		&i.Description,
		&i.Website,
		&i.Address,
		&i.Balance,
	)
	return i, err
}

const listMerchants = `-- name: ListMerchants :many
SELECT id, merchant_name, description, website, address, balance FROM merchants LIMIT $1 OFFSET $2
`

type ListMerchantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMerchants(ctx context.Context, arg ListMerchantsParams) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, listMerchants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Merchant{}
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.MerchantName,
			&i.Description,
			&i.Website,
			&i.Address,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatMerchants = `-- name: UpdatMerchants :one
UPDATE merchants SET description = $2, address = $3 WHERE id = $1 RETURNINg id, merchant_name, description, website, address, balance
`

type UpdatMerchantsParams struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
	Address     string `json:"address"`
}

func (q *Queries) UpdatMerchants(ctx context.Context, arg UpdatMerchantsParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, updatMerchants, arg.ID, arg.Description, arg.Address)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.MerchantName,
		&i.Description,
		&i.Website,
		&i.Address,
		&i.Balance,
	)
	return i, err
}
