// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfers = `-- name: CreateTransfers :one
INSERT INTO Transfers (
    from_wallet_id,
    to_wallet_id,
    amount,
    description
) VALUES (
    $1, $2, $3, $4
) RETURNING id, from_wallet_id, to_wallet_id, amount, transfer_date, description
`

type CreateTransfersParams struct {
	FromWalletID int32   `json:"from_wallet_id"`
	ToWalletID   int32   `json:"to_wallet_id"`
	Amount       float64 `json:"amount"`
	Description  string  `json:"description"`
}

func (q *Queries) CreateTransfers(ctx context.Context, arg CreateTransfersParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfers,
		arg.FromWalletID,
		arg.ToWalletID,
		arg.Amount,
		arg.Description,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromWalletID,
		&i.ToWalletID,
		&i.Amount,
		&i.TransferDate,
		&i.Description,
	)
	return i, err
}

const getTransfersByFromWalletID = `-- name: GetTransfersByFromWalletID :many
SELECT id, from_wallet_id, to_wallet_id, amount, transfer_date, description FROM transfers 
WHERE from_wallet_id = $1
`

func (q *Queries) GetTransfersByFromWalletID(ctx context.Context, fromWalletID int32) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByFromWalletID, fromWalletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromWalletID,
			&i.ToWalletID,
			&i.Amount,
			&i.TransferDate,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByFromWalletIdAndToWalletId = `-- name: GetTransfersByFromWalletIdAndToWalletId :many
SELECT id, from_wallet_id, to_wallet_id, amount, transfer_date, description FROM transfers 
WHERE from_wallet_id = $1
AND to_wallet_id = $2
`

type GetTransfersByFromWalletIdAndToWalletIdParams struct {
	FromWalletID int32 `json:"from_wallet_id"`
	ToWalletID   int32 `json:"to_wallet_id"`
}

func (q *Queries) GetTransfersByFromWalletIdAndToWalletId(ctx context.Context, arg GetTransfersByFromWalletIdAndToWalletIdParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByFromWalletIdAndToWalletId, arg.FromWalletID, arg.ToWalletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromWalletID,
			&i.ToWalletID,
			&i.Amount,
			&i.TransferDate,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
