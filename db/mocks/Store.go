// Code generated by mockery v2.20.0. DO NOT EDIT.

package dbmocks

import (
	context "context"

	db "git.enigmacamp.com/enigma-camp/enigmacamp-2.0/batch-5/khilmi-aminudin/challenge/go-ewallet/db/sqlc"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddMerchantBalance provides a mock function with given fields: ctx, arg
func (_m *Store) AddMerchantBalance(ctx context.Context, arg db.AddMerchantBalanceParams) (db.Merchant, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddMerchantBalanceParams) (db.Merchant, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddMerchantBalanceParams) db.Merchant); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Merchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddMerchantBalanceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddWalletBalance provides a mock function with given fields: ctx, arg
func (_m *Store) AddWalletBalance(ctx context.Context, arg db.AddWalletBalanceParams) (db.Wallet, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddWalletBalanceParams) (db.Wallet, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddWalletBalanceParams) db.Wallet); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Wallet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddWalletBalanceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMerchants provides a mock function with given fields: ctx, arg
func (_m *Store) CreateMerchants(ctx context.Context, arg db.CreateMerchantsParams) (db.Merchant, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateMerchantsParams) (db.Merchant, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateMerchantsParams) db.Merchant); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Merchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateMerchantsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: ctx, arg
func (_m *Store) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Session, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSessionParams) (db.Session, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSessionParams) db.Session); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateSessionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopUps provides a mock function with given fields: ctx, arg
func (_m *Store) CreateTopUps(ctx context.Context, arg db.CreateTopUpsParams) (db.Topup, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Topup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTopUpsParams) (db.Topup, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTopUpsParams) db.Topup); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Topup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTopUpsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: ctx, arg
func (_m *Store) CreateTransaction(ctx context.Context, arg db.CreateTransactionParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransactionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransfers provides a mock function with given fields: ctx, arg
func (_m *Store) CreateTransfers(ctx context.Context, arg db.CreateTransfersParams) (db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransfersParams) (db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransfersParams) db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTransfersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUsers provides a mock function with given fields: ctx, arg
func (_m *Store) CreateUsers(ctx context.Context, arg db.CreateUsersParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUsersParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUsersParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUsersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWallets provides a mock function with given fields: ctx, arg
func (_m *Store) CreateWallets(ctx context.Context, arg db.CreateWalletsParams) (db.Wallet, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateWalletsParams) (db.Wallet, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateWalletsParams) db.Wallet); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Wallet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateWalletsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWithdrawals provides a mock function with given fields: ctx, arg
func (_m *Store) CreateWithdrawals(ctx context.Context, arg db.CreateWithdrawalsParams) (db.Withdrawal, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateWithdrawalsParams) (db.Withdrawal, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateWithdrawalsParams) db.Withdrawal); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Withdrawal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateWithdrawalsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMerchants provides a mock function with given fields: ctx, id
func (_m *Store) DeleteMerchants(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUsers provides a mock function with given fields: ctx, id
func (_m *Store) DeleteUsers(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantsById provides a mock function with given fields: ctx, id
func (_m *Store) GetMerchantsById(ctx context.Context, id int64) (db.Merchant, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Merchant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Merchant); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Merchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantsByMerchantsName provides a mock function with given fields: ctx, merchantName
func (_m *Store) GetMerchantsByMerchantsName(ctx context.Context, merchantName string) (db.Merchant, error) {
	ret := _m.Called(ctx, merchantName)

	var r0 db.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Merchant, error)); ok {
		return rf(ctx, merchantName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Merchant); ok {
		r0 = rf(ctx, merchantName)
	} else {
		r0 = ret.Get(0).(db.Merchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, merchantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: ctx, id
func (_m *Store) GetSessions(ctx context.Context, id uuid.UUID) (db.Session, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Session, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Session); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionUserID provides a mock function with given fields: ctx, userID
func (_m *Store) GetTransactionUserID(ctx context.Context, userID int32) ([]db.Transaction, error) {
	ret := _m.Called(ctx, userID)

	var r0 []db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]db.Transaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []db.Transaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionWalletByidAndUserID provides a mock function with given fields: ctx, arg
func (_m *Store) GetTransactionWalletByidAndUserID(ctx context.Context, arg db.GetTransactionWalletByidAndUserIDParams) ([]db.Transaction, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTransactionWalletByidAndUserIDParams) ([]db.Transaction, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTransactionWalletByidAndUserIDParams) []db.Transaction); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetTransactionWalletByidAndUserIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionWalletID provides a mock function with given fields: ctx, walletID
func (_m *Store) GetTransactionWalletID(ctx context.Context, walletID int32) ([]db.Transaction, error) {
	ret := _m.Called(ctx, walletID)

	var r0 []db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]db.Transaction, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []db.Transaction); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransfersByFromWalletID provides a mock function with given fields: ctx, fromWalletID
func (_m *Store) GetTransfersByFromWalletID(ctx context.Context, fromWalletID int32) ([]db.Transfer, error) {
	ret := _m.Called(ctx, fromWalletID)

	var r0 []db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]db.Transfer, error)); ok {
		return rf(ctx, fromWalletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []db.Transfer); ok {
		r0 = rf(ctx, fromWalletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, fromWalletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransfersByFromWalletIdAndToWalletId provides a mock function with given fields: ctx, arg
func (_m *Store) GetTransfersByFromWalletIdAndToWalletId(ctx context.Context, arg db.GetTransfersByFromWalletIdAndToWalletIdParams) ([]db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTransfersByFromWalletIdAndToWalletIdParams) ([]db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTransfersByFromWalletIdAndToWalletIdParams) []db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetTransfersByFromWalletIdAndToWalletIdParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, id
func (_m *Store) GetUserById(ctx context.Context, id int64) (db.User, error) {
	ret := _m.Called(ctx, id)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserName provides a mock function with given fields: ctx, username
func (_m *Store) GetUserByUserName(ctx context.Context, username string) (db.User, error) {
	ret := _m.Called(ctx, username)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletById provides a mock function with given fields: ctx, id
func (_m *Store) GetWalletById(ctx context.Context, id int64) (db.Wallet, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Wallet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Wallet); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Wallet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByIdAndUserId provides a mock function with given fields: ctx, arg
func (_m *Store) GetWalletByIdAndUserId(ctx context.Context, arg db.GetWalletByIdAndUserIdParams) (db.Wallet, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetWalletByIdAndUserIdParams) (db.Wallet, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetWalletByIdAndUserIdParams) db.Wallet); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Wallet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetWalletByIdAndUserIdParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchants provides a mock function with given fields: ctx, arg
func (_m *Store) ListMerchants(ctx context.Context, arg db.ListMerchantsParams) ([]db.Merchant, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListMerchantsParams) ([]db.Merchant, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListMerchantsParams) []db.Merchant); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Merchant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListMerchantsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, arg
func (_m *Store) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListUsersParams) ([]db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListUsersParams) []db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListUsersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MerchantPaymentTransactions provides a mock function with given fields: ctx, arg, merchantID
func (_m *Store) MerchantPaymentTransactions(ctx context.Context, arg db.CreateTransactionParams, merchantID int64) error {
	ret := _m.Called(ctx, arg, merchantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransactionParams, int64) error); ok {
		r0 = rf(ctx, arg, merchantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TopupTransactions provides a mock function with given fields: ctx, arg
func (_m *Store) TopupTransactions(ctx context.Context, arg db.CreateTopUpsParams) (db.TopupResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.TopupResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTopUpsParams) (db.TopupResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTopUpsParams) db.TopupResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.TopupResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTopUpsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferTransactions provides a mock function with given fields: ctx, arg
func (_m *Store) TransferTransactions(ctx context.Context, arg db.CreateTransferParams) (db.TransferResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.TransferResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) (db.TransferResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) db.TransferResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.TransferResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTransferParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatMerchants provides a mock function with given fields: ctx, arg
func (_m *Store) UpdatMerchants(ctx context.Context, arg db.UpdatMerchantsParams) (db.Merchant, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdatMerchantsParams) (db.Merchant, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdatMerchantsParams) db.Merchant); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Merchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdatMerchantsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserIDcard provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateUserIDcard(ctx context.Context, arg db.UpdateUserIDcardParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserIDcardParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUsers provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateUsers(ctx context.Context, arg db.UpdateUsersParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUsersParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUsersParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateUsersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsersPassword provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateUsersPassword(ctx context.Context, arg db.UpdateUsersPasswordParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUsersPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletHistoryGenerateCSV provides a mock function with given fields: ctx, arg
func (_m *Store) WalletHistoryGenerateCSV(ctx context.Context, arg db.GetTransactionWalletByidAndUserIDParams) (db.WalletHistoryResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.WalletHistoryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTransactionWalletByidAndUserIDParams) (db.WalletHistoryResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTransactionWalletByidAndUserIDParams) db.WalletHistoryResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.WalletHistoryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetTransactionWalletByidAndUserIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawalTransactions provides a mock function with given fields: ctx, arg
func (_m *Store) WithdrawalTransactions(ctx context.Context, arg db.CreateWithdrawalsParams) (db.WithdrawalResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.WithdrawalResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateWithdrawalsParams) (db.WithdrawalResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateWithdrawalsParams) db.WithdrawalResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.WithdrawalResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateWithdrawalsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
